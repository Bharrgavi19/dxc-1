NVL2
----------
select first_name,manager_id, salary, NVL2(manager_id,salary+5000,salary) from employees;

SELECT last_name, salary, commission_pct,
NVL2(commission_pct,'SAL+COMM', 'SAL') income
FROM employees WHERE department_id IN (50, 80);

select * from employees;

select first_name,JOB_ID, salary, NVL2(JOB_ID,salary*0.2+salary,salary) from employees;

NULLIF
-----------
select first_name,salary,NULLIF(salary,salary+10) from employees;


SELECT 
first_name, LENGTH(first_name) "expr1",
last_name, LENGTH(last_name) "expr2",
NULLIF(LENGTH(first_name), LENGTH(last_name)) result
FROM employees;


-------
SELECT laonno, NULLIF(intrest_rate,10) result FROM daily_pipeline_loan_fact

loan no     result
1.         NULL
2.         12
3.         15
4.         NULL

select first_name, hire_date, NULLIF(hire_date, '08/17/2002') from employees;


select first_name, hire_date, NULLIF(hire_date, To_date('08/17/2002','fmMM/DD/YY')) from employees;


-------------COALESCE

SELECT coalesce( address1, address2, address3 ) result
FROM suppliers;
---------------------------

SELECT last_name, salary, commission_pct,
COALESCE((salary+(commission_pct*salary)), salary+2000) "New Salary"
FROM employees;


select salary+(commission_pct+salary) from employees;

---------CASE

SELECT last_name, job_id, salary,
CASE job_id WHEN 'IT_PROG' THEN 1.10*salary
WHEN 'ST_CLERK' THEN 1.15*salary
WHEN 'SA_REP' THEN 1.20*salary
ELSE salary 
END "REVISED_SALARY"
FROM employees;

select * from employees;

select first_name,department_id,salary,
CASE department_id WHEN '60' THEN 1.20*salary
WHEN '90' THEN 1.40*salary
WHEN '100' THEN 1.60*salary
ELSE salary
END "REVIESED_SALARY"
FROM employees;

SELECT first_name, department_id, salary, CASE 'department_id' WHEN '60' THEN 1.20*salary WHEN '90' THEN 1.40*salary WHEN '100' THEN 1.60*salary ELSE salary END AS "INCREMENT" FROM employees

SELECT first_name, department_id, salary,
 CASE department_id 
WHEN 60 THEN 1.20*salary
WHEN 90 THEN 1.40*salary 
WHEN 100 THEN 1.60*salary
ELSE salary 
END AS "INCREMENT" 
FROM employees;




SELECT last_name,salary, 
(CASE 
WHEN salary<5000 THEN 'Low' 
WHEN salary<10000 THEN 'Medium' 
WHEN salary<20000 THEN 'Good' 
ELSE 'Excellent' 
END) 
qualified_salary FROM employees;

desc employees;

SELECT last_name, job_id, salary,
DECODE(job_id, 'IT_PROG', 1.10*salary,
'ST_CLERK', 1.15*salary,
'SA_REP', 1.20*salary,
salary)
REVISED_SALARY
FROM employees;

select salary, .10*salary+salary from employees;


SELECT last_name, salary,
DECODE (TRUNC(salary/2000, 0),
0, 0.00,
1, 0.09,
2, 0.20,
3, 0.30,
4, 0.40,
5, 0.42,
6, 0.44,
0.45) TAX_RATE
FROM employees
WHERE department_id = 80;

select salary, TRUNC(salary/2000, 0) from employees;


select max(salary) from employees;
select min(salary) from employees;
select avg(salary) from employees;
select round(avg(salary),0) from employees;
select sum(salary) from employees;

SELECT AVG(salary), MAX(salary), MIN(salary), SUM(salary)
FROM employees
WHERE job_id LIKE '%REP%';


SELECT MIN(hire_date), MAX(hire_date)
FROM employees;


select min(hire_date) from employees;
select max(hire_date) from employees;

select min(first_name) from employees;
select max(first_name) from employees;



SELECT MIN(hire_date), MAX(hire_date)
FROM employees;

select COUNT(*) from employees;
select COUNT(commission_pct) from employees;

select COUNT(DISTINCT department_id) from employees;


select AVG(commission_pct) from employees;
SELECT AVG(NVL(commission_pct, 0)) FROM employees;


--------------GROUP BY
SELECT department_id, AVG(salary)
FROM employees
GROUP BY department_id ;

WAQ to display how many are working under a particular manager
manager_id   NoOfEmployees

100            6
101            8
..
..

select * from employees;

SELECT count(first_name) "no of employees" 
FROM employees
GROUP BY manager_id 
order by manager_id desc


---Add the salaries in the EMPLOYEES
table for each job, grouped by department.

select * from employees;


select department_id, job_id , sum(salary)
from employees
WHERE department_id > 90
GROUP BY department_id, job_id
ORDER BY department_id

-----
select department_id, job_id , salary from employees
where JOB_ID = 'FI_ACCOUNT' and department_id = 100


WAQ to display the count of employees from same department and also hired on same date.
SELECT department_id, hire_date,
 count(employee_id) "no of employees" FROM employees GROUP BY department_id, hire_date 
order by hire_date ;


SELECT department_id, AVG(salary)
FROM employees
WHERE AVG(salary) > 8000
GROUP BY department_id;


SELECT department_id, AVG(salary)
FROM employees
HAVING AVG(salary) > 8000
GROUP BY department_id;


SELECT department_id, round(AVG(salary),0)
FROM employees
WHERE department_id > 80 
HAVING round(AVG(salary),0) > 8000 AND round(sum(salary),0) > 8000
GROUP BY department_id
ORDER BY department_id desc






SELECT job_id, SUM(salary) PAYROLL
FROM employees
WHERE job_id NOT LIKE '%REP%'
GROUP BY job_id
HAVING SUM(salary) > 13000
ORDER BY SUM(salary) desc;


SELECT MAX(AVG(salary))
FROM employees
GROUP BY department_id;






















